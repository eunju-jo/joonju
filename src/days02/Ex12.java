package days02;

/**
 * @author 조은주
 * @date 2021. 3. 9 - 오후 4:12:18
 * @subject 진법
 * @content
 *
 */
public class Ex12 {
 
	public static void main(String[] args) {
		/* [ n진수 ]
		 * 10진수 : 0 1 2 3 4 5 6 7 8 9
		 * 2진수 : 0 1
		 * 8진수 : 0 1 2 3 4 5 6 7 [] [] [] 2^3 = 8가지 나옴
		 * 16진수 : 0 1 2 3 4 5 6 7 8 9 a(10) b(11) c(12) d(13) e(14) f(15)	
		*/		
		
		// 10진수 10을 2진수로 표현? (진법 변환)
		// 2로 나눠서 더이상 나눠지지 않을때까지.
		// 1바이트(8bit)   0000 1010
		// 2바이트(16bit) 0000 0000  0000 1010
		
		/* 2진수 -> 10진수 (진법 변환)
		 * 1010 -> 10
		 * 2^3 + 0 + 2^1 + 0 = 10
		 */
		
		
		//10진수 10을 8진수로 표현? (진법 변환) =>나누면 12나옴
		// 012. (앞에 숫자0 + 나온수)
		
		/*8진수 -> 10진수
		 * 12 -> 8^1*1 + 8^0*2 = 10
		 */
		
		
		//10진수 10을 16진수로 표현? 
		// 10 =>  a (앞에 0x + 수)
		//1바이트			0x0a
		//2바이트 		0x0000a
		
		/* 16진수 -> 10진수
		 *  a *10^0  => 10
		 */
		
		// 123 정수 -> 2진수/8진수/16진수
		// 2진수 : 0111 1011
		// 128 64 32 16 8 4 2 1
		// 123- 각 숫자 빼기 하면 쉽게 나옴(128은 못빼니까 0 123-64 = 57에서 다음값 빼고 그런식)
		// 8진수 : [01][111][011]  =>173
		// 16진수 : 2진수거 네개씩 끊어읽기 (개발자 계산기)
		
		byte b = 10; //0000 1010
		int i =10; // 00000000 00000000 00000000 00001010
		long l = 10L; // 8덩어리 끝에 00001010
		
//		byte b = -10; //양수는 [0][0][0][0][1][0][1][0] 음수는?
		
		/* [음수 표현 방법] 
		 * 1. 부호와 절대치 : 절대값을 2진수로 표현 [1]000 1010 하되
		 * 							첫 비트는 '부호비트'로 빼자
		 * 		> 부호비트 '1' = 음수값이라는 뜻 (0 = 양수)
		 * 		> 현재 안쓴다고..? |0| [1]000 0000이나 [0]000 0000이나 음수. 두가지라 낭비라 안씀
		 * 
		 * 2. 1의 보수법
		 *	ㄱ. 절대치 구하기 : |-10| =>10
		 * ㄴ. 2진수 만들기 : 				0000 1010  == 10
		 * ㄷ. 1의 "보수" : 1은 0, 0은 1로.
		 * 										1111 0101 == -10.
		 * 			얘도 문제: 0 0000 0000 0표현 두개라 안씀
		 * 							1111 1111
		 * 
		 * 3. 2의 보수법(현재) 50 ~ 54페이지 참고 / '보수' 개념 확인
		 * -10
		 *  1) 부호와 절대치 방식
		 *  - 절대치 10. -> 0000 1010
		 *  
		 *  2) 1의 보수를 취함
		 *  					 1111 0101
		 *  								   1
		 *  					1111  0110
		 *  3) 보수 취한 것에 +1 (위에 값)
		 * 			=> 1111 0110
		 *  
		 *  (예습겸)훑어보고 올 파트
		 *  : p48-49 실수의 진법변환(한장)
		 *    p68-72 실수형 float, double
		 *  
		 */
		
		
	}

}
