package days15;

public class Ex02 {

	public static void main(String[] args) {
/*
 
[1]		절차적 프로그래밍 기법
[2]		구조적 프로그래밍 기법 - 함수 기본
[3]		객체 지향적 프로그래밍기법 OOP: object oriented programming		
		객체 단위로 프로그래밍 : 
			예) 조립컴 만든다고 가정: 사용목적, 금전적, 각 부품 주문  => 컴퓨터 조립
			프로그래밍도 조립컴 만들듯이 하자
		1년 사용하다보면.. 메모리 부족(메모리 추가로 사서 꽂기)
		-유지보수 및 확장성이 훨씬 좋아짐
		** 객체 지향적프로그래밍 언어 : 자바
		 = 객체 + 객체 + 객체
		 자바 프로그램 기본 구조
		 * main() 가지는 시작객체(개체) 반드시 선언
		 
		 객체 = 하나하나의 부속이 되는 물건. 즉 객체는 '속성'+ '기능'
		 객체를 만들기 위해서는 설계도가 필요함 --> '클래스'
		
		 ## 클래스와 객체(의미 및 차이점) --셤 
		  - 클래스 : 객체를 만들기 위한 '설계도' 
		  - 객체 : 클래스로 생성된 것 -- 인스턴스 개념이 포함되어 있음(추후 구분설명하겠음)
		 
		 ## 클래스를 선언하는 형식 
		 접근지정자(access)[public] 기타제어자[class] 클래스명 [extends Super클래스][implements 인터페이스..(..=여러개올수있음)]{
			 수정자modifier: 접근지정자+기타제어자
			 
			 "구성요소들"
		 }
		 
		## oop 특징 : 상속성, 추상화, 캡슐화, [다형성]이해하면 다 한것, 은닉화
			 다형성: 인터페이스에 대한 설명 제대로 이해 필요
		 
		
		## 클래스 설계하는 과정(단계)	
		 *    ㄱ. *** 요구분석 ***
		 *    ㄴ. 특징(속성), 기능(함수==메서드) 목록 작성
		 *    ㄷ. 클래스 선언(설계)
		 *    ㄹ. 객체 테스트
		 *    ㅁ. 문제점  - 유지, 보수
		 *    ㅂ. 상용화
		 *    ㅅ. 버젼 관리 + 기능, 문제점 처리
		 ***요구분석***이 가장 중요한 과정
		  -- 특징(속성), 기능(함수== '메서드' = 클래스안에 선언된 함수)  등 파악해서 목록 작성
		  -- 앞으로는 메인 메서드라고 부르는 것이 맞음
		  -- 클래스 선언(설계)
		  -- 객체(집 짓는 과정) 테스트(샘플로)
		  -- 문제점 - 유지, 보수
		  -- 상용화(후에도 생각지못한 문제들로 유지보수과정은 필요함)
		  -- 버전관리(기능 개선, 기능 추가, 문제 해결)
		  
		  -- 이젠 어떤 기능을 하는 클래스들을 만들려고 함
		  
		예) 주택(객체)지어야지 : 대지, 비용, 설계사, 시공업체
		설계사 --> 모든걸 반영해서 설계도면 작성 == 클래스  --나한테 설계는 안시킬것.,
		1. 대지 상태 등 확인
		2. 집주인 요구사항분석
		
		취직하면 설계도(클래스)가 거의 되어 있음
		
		시공업체
		- 철근 전기 등등 각 파트별 담당자들이 있을 것
		
		## 클래스의 구성요소(== 멤버) : 필드, 메서드
			ㄱ. 속성(특징): 클래스 안에 있는 '변수' - 멤버변수 == '필드field'	
			ㄴ. 기능(일): 클래스 안에 있는 '함수' - 멤버함수 == '메서드method'	
		
		## 클래스 앞에 붙이는 접근지정자(access modifier) 종류/설명 --암기
		ㄱ. public : 다른 패키지에서도 이 클래스를 사용할 수 있음(참조, 상속 가능)
		ㄴ. default(안붙이기) - package : 같은 패키지 내에서만 이 클래스 사용(참조, 상속)		
		
		[ㄷ,ㄹ: 중첩 클래스 선언시에만 사용할 수 있음]
		ㄷ. protected -- 비활성 : 같은 패키지 내에서 상속, 참조 가능
		  						다른 패키지에서 상속만 가능
		ㄹ. private	-- 비활성 : 같은 파일 내에서만 상속, 참조 가능
								(Car.java)안에서만 ! 
		
		## 클래스 앞에 붙이는 기타제어자 --암기
		ㄱ. abstract : 추상 클래스 선언
		ㄴ. final : 최종 클래스 선언(상속배워야 이해가능)	
			final double PI = 3.141592; //상수(ㅇ다른 의미임)	
		ㄷ. static -- 비활성 : 중첩 클래스에 사용가능. 스태틱(정적) 클래스 선언
	
		## 클래스 선언 : 어떤 객체를 만들기 위한 설계도인지 선언할 수 있음 (예)신형 차)
		ㄱ. 요구분석
		 - 스포츠카 : 3도어
		 - 연료 : 전기 or 휘발유 or 수소차 or 전+휘(하이브리드)
		 - 엔진 : 0~100(제로백) 3초되게
		 - 본네트 등 철- 가볍고 강한 차체 : 알루미늄?
		 - 속도
		 - 바퀴수
		 
		 - 기능
		 
		 ㄴ. 속성, 기능 목록 작성
		 ㄷ. 클래스 선언(설계)
		 
		 ㄱ~ㄷ 다 거쳤따고 가정하고 세워보겠음
		  
		 
		
		
		
		
		
		 ((각 개념 정확히 이해, 암기 필요))
		 
*/
	}//main

}//class


class Car{
	//가로 세로 색깔 탑승인원 - 특징(속성)
	
}
