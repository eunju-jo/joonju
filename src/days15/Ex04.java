package days15;

import java.util.Scanner;

public class Ex04 {

	public static void main(String[] args) {
/*
//		new Car(); 해놓고 암것도 안하는거
//		//틀린 코딩은 아니나 가비지(활용안되는 것들)가 메모리 차지하고 있어서 좋진 않음
		
		//스캐너 객체(참조변수,변수,지역변수) 선언
		Scanner scanner = new Scanner(System.in);
		
		int n = scanner.nextInt();
		
		//		Scanner scanner; 만 해놓은 상태면 
		//The local variable scanner may not have been initialized
		
		//		Scanner scanner = null;
		// 빨간불은 안뜨지만 Exception in thread "main" java.lang.NullPointerException 뜸 참조할 데가 없으니까
*/
		
//		System sys = new System();
		//The constructor System() is not visible : 시스템 클래스의 디폴트 생성자가 접근할 수 없다
		//시스템클래스 설명: The System class contains several useful class fields and methods. .
		// it cannot be instantiated. 인스턴스화 = 객체를 생성하는 것 ((시스템 클래스는 [인스턴스화] 할 수 없다))	
		System.out.println(" = END = ");
		
		//챕터 6,7 스르르ㅡㄱ 다 읽어보기 너무 자세히 읽으면 힘듦 남궁성씨 피피티랑 유투브 한번 슥 보기
		
	}

}







/*
< 남궁성 유투브 내용 추가 >

-객체와 인스턴스 차이
객체 == 인스턴스
객체는 일반적 의미의 용어, 인스턴스는 특정 클래스에 속하는 객체임을 강조할 때 사용

객체 : 속성 + 기능
-속성 : 객체의 속성은 변수로,  --- 크기, 길이, 볼륨, 채널 등  
-기능 : 객체의 기능은 메서드로 정의. ---켜기, 끄기, 볼륨 높이기 등 

Tv v; 변수의 선언
t = new TV(); 초기화를 한 줄로 아래처럼 표현 할 수 있음 

Tv t = new TV();

TV()로 생성된 TV 인스턴스(TV 클래스에 속하는 객체) '주소'를 참조변수 t에 저장 
- 멤버변수들은 각 자료형의 기본값으로 초기화되어 있음
'참조변수.메서드' 로 호출하면됨
== t.channelDown();

하나의 인스턴스(TV)에 하나의 참조변수(t)가 있는 것이 보통임.
- 하나의 인스턴스를 여러 개의 참조변수(t1,t2)가 가리키는 경우 - 가능
- 여러개의 인스턴스를 하나의 참조변수가 가리키는 경우 - 불가능
  -- 하나의 변수에는 하나의 값만 넣을 수 있기 때문
  
  
## 선언위치에 따른 변수의 종류
[1] 인스턴스 변수: 각 인스턴스의 개별적인 저장공간.인스턴스마다 다른 값 저장 가능 
  인스턴스 생성후, 참조변수를 통해(참조변수.인스턴스변수명_ t.channelUp();) 인스턴스변수에 접근 가능
  생성된 후 참조변수가 없을 때, 가비지 컬렉터에 의해 자동제거됨 (효율적인 메모리 관리) -바로 없어지는건 아니고 일정시간마다 작동
  
[2] 클래스 변수 : 같은 클래스의 모든 인스턴스들이 공유하는 변수 (변수 모두에 공통적인 부분)
인스턴스 생성하지 않아도 언제든 '클래스이름.클래스변수명'으로 접근 가능
클래스 로딩될 때 생성되고 프로그램이 종료될 때 소멸됨
@참조변수를 통해 클래스 변수의 값을 바꿀 수 있음
  - 같은 클래스 변수를 참조하는 다른 변수 또한 바뀐 클래스 변수의 값을 같이 공유하게 됨
  - c1.width로 바뀌어도 c1,c2모두 width가 바뀌지만 card.width로 바꾸는게 더 정확한 방법

[3] 지역변수 : 메서드 내에 선언되며, 메서드의 종료와 함께 소멸
조건문, 반복문의 블럭{} 내에 선언된 지역변수는 블럭을 벗어나면 소멸


메서드 : 작업을 수행하기 위한 명령문의 집합
어떤 값을 입력받아서 처리하고 그 결과를 돌려줌 
  (입력받는 값이 없을 수도 있고, 결과를 돌려주지 않을 수도 있음)
  (예) void power(){
  		power = !power;
  		} //입출력 모두 필요 없음 
  
단 하나의 값만 반환할 수 있으며, 여러 값이면 배열등을 참조해야 함
하나의 메서드만 하나의 기능만 작성하는 것이 좋음
프로그램이 클수록 큰흐름만 메서드 활용해 틀을 작성하고, 메서드를 하나하나 채워가는 것이 좋음 

메서드는 클래스 영역에만 정의할 수 있고, 중복으로(메서드 안에 메서드) 작성할 수는 없


메서드가 정상적으로 종료되는 경우
[1] 메서드의 블럭{}의 끝에 도달했을 때
[2] 메서드의 블럭{}을 수행 도중 return문을 만났을 때

반환값이 없는 경우 return;만 써주면 됨
하나의 메서드 내에서 return문의 개수는 최소화 하는 것이 좋음
return a; return b; 하는 것보다 result = a; result = b;로 담아서
메서드 끝에 return result;하는 것이 더 좋음

메서드에 리턴값이 있는 경우(long add(long a, long b){..})라면 
메인함수에 리턴값과 동일한 타입의 변수를 선언해 받아주어야 그 값을 출력할 수 있음
예) long value = mm.add(1L, 2L); 
1L이 a에, 2L이 b에 저장되며 메서드 실행되는 

▶ 기본형 매개변수 – 변수의 값을 읽기만 할 수 있다.(read only)
▶ 참조형 매개변수 – 변수의 값을 읽고 변경할 수 있다.(read & write)
   -- 값의 주소값을 읽어오는 것이기 때문
   
 예) 
 메인메서드에 Data d = new data(); d.x = 10; 있는 경우
 change(d.x); -기본형 매개변수(x의 값을 읽어와서 지역변수만 변경됨)
 change(d); - 참조형 매개변수(주소를 읽어와서 read&re-write 모두 가능) 
   
 
## 클래스 메서드(static 메서드) & 인스턴스메서드
-인스턴스 변수를 사용하면 인스턴스 메서드,사용하지 않으면 클래스 메서드!
   
▶ 클래스메서드(static메서드) _ main() 메서드가 대표적
- 객체생성없이 ‘클래스이름.메서드이름()’으로 호출
- 인스턴스변수나 인스턴스메서드와 관련없는 작업을 하는 메서드 
- 메서드 내에서 인스턴스변수 사용불가
- 메서드 내에서 인스턴스변수를 사용하지 않는다면 static을 붙이는 것을 고려한다.
  (인스턴스 메서드를 호출하는 것도 간접적으로 인스턴스 변수를 사용하는 것이라고 볼 수 있음) 
   
▶ 인스턴스메서드 _인스턴스 생성해야만 가능
"인스턴스 변수와 인스턴스 메서드와 관련된 작업을 하는 것" 그렇지 않은 것이 클래스 메서드
- 인스턴스 생성 후, ‘참조변수.메서드이름()’으로 호출
- 인스턴스변수나 인스턴스메서드와 관련된 작업을 하는 메서드 - 메서드 내에서 인스턴스변수 사용가능



# 생성자 == Car();

▶ 생성자란?
- 인스턴스가 생성될 때마다 호출되는 ‘인스턴스 초기화 메서드’
- 인스턴스 변수의 초기화 또는 인스턴스 생성시 수행할 작업에 사용
- 몇가지 조건을 제외하고는 메서드와 같다.
- 모든 클래스에는 반드시 하나 이상의 생성자가 있어야 한다.

Car c = new Car();
- 연산자 new에 의해 메모리(heap)에 Card클래스 인스턴스가 생성됨
- 생성자 Car()가 호출되어 수행됨
- 연산자 new의 결과로, 생성된 Car인스턴스 주소가 반환되어 참조변수 c에 저장

▶ 생성자의 조건
- 생성자의 이름은 클래스의 이름과 같아야 한다.
- 생성자는 리턴값이 없다. (하지만 void를 쓰지 않는다.)

“모든 클래스에는 반드시 하나 이상의 생성자가 있어야 한다.”

▶ this() – 생성자, 같은 클래스의 다른 생성자를 호출할 때 사용

			다른 생성자 호출은 생성자의 첫 문장에서만 가능

Car() {
this("white", "auto", 4);
}


▶ this – 인스턴스 자신을 가리키는 참조변수. 인스턴스의 주소가 저장되어있음
		모든 인스턴스 메서드에 지역변수로 숨겨진 채로 존재

Car(String color, String gearType, int door) {
	this.color = color;
	this.gearType = gearType;
	this.door = door;
}




*/